{{- if .Values.stardog.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "stardog.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: server
spec:
  selector:
    matchLabels:
      app: {{ include "stardog.fullname" . }}
  serviceName: {{ include "stardog.fullname" . }}
  replicas: {{ .Values.stardog.cluster.replicaCount }}
  # Enable for debugging purpose only, usually for bringing all pods at once in a StatefulSet
  podManagementPolicy: {{ .Values.stardog.podManagementPolicy }}
  template:
    metadata:
      labels:
        app: {{ include "stardog.fullname" . }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/version: {{ .Chart.AppVersion }}
        app.kubernetes.io/component: server
        stardog.com/deployname: {{ .Release.Name }}
        stardog.com/resource-type: cluster-node
        {{- if .Values.stardog.licenseServer.enabled }}
        stardog.com/license-type: {{ .Values.stardog.licenseServer.licenseType }}
        {{- end }}
    spec:
      {{- with .Values.stardog.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.stardog.securityContext | nindent 8 }}
      affinity:
        podAntiAffinity:
          {{ .Values.stardog.antiAffinity }}:
        {{- if eq .Values.stardog.antiAffinity "requiredDuringSchedulingIgnoredDuringExecution" }}
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - {{ include "stardog.fullname" . }}
            topologyKey: "kubernetes.io/hostname"
        {{- else }}
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - {{ include "stardog.fullname" . }}
              topologyKey: "kubernetes.io/hostname"
        {{- end }}
{{ if .Values.stardog.cluster.enabled }}
      initContainers:
      - name: wait-for-zk
        image: busybox
        resources:
          requests:
            memory: 250Mi
            cpu: 300m
          limits:
            memory: 250Mi
            cpu: 300m
        command:
        - /bin/sh
        - -c
        - |
        {{- if .Values.zookeeper.enabled }}
            while :
              do
              echo "Checking for ZK readiness"
              ZK_OK=$(echo ruok | nc {{ .Release.Name }}-zookeeper-headless.{{ .Release.Namespace }} 2181)
              if [[ "${ZK_OK}" == "imok" ]]; then
                echo "ZK reports ready and in good state"
                exit 0
              fi
              sleep 1
            done
            {{- else }}
              echo "Using existing zookeeper"
            {{- end }}
{{- end }}
      containers:
      - name: {{ include "stardog.fullname" . }}
        imagePullPolicy: {{ .Values.stardog.image.pullPolicy }}
        image: "{{ .Values.stardog.image.registry }}/{{ .Values.stardog.image.repository }}:{{ .Values.stardog.image.tag }}"
        securityContext:
        {{- toYaml .Values.stardog.securityContext | nindent 12 }}
        ports:
        - containerPort: {{ .Values.stardog.ports.server }}
          name: server
        {{- if .Values.stardog.ports.sql }}
        - containerPort: {{ .Values.stardog.ports.sql }}
          name: sql
        {{- end }}
        {{- with .Values.stardog.resources }}
        resources:
          {{- toYaml . | nindent 10}}
        {{- end }}
        volumeMounts:
        - name: {{ include "stardog.fullname" . }}-password
          mountPath: /etc/stardog-password
          readOnly: true
        {{- if not .Values.stardog.licenseServer.enabled }}
        - name: stardog-license
          mountPath: /etc/stardog-license
          readOnly: true
        {{- end }}
        - name: data
          mountPath: /var/opt/stardog/
          readOnly: false
        - name: {{ include "stardog.fullname" . }}-properties-vol
          mountPath: /etc/stardog-conf/stardog.properties
          subPath: stardog.properties
        - name: {{ include "stardog.fullname" . }}-log4j-vol
          mountPath: /var/opt/stardog/log4j2.xml
          subPath: log4j2.xml
          readOnly: true
       {{- if .Values.stardog.jwt.enabled }}
        - name: {{ include "stardog.fullname" . }}-jwt
          mountPath: /var/opt/stardog/jwt.yaml
          subPath: jwt.yaml
          readOnly: true
       {{- end }}
        {{- if .Values.stardog.backup.enabled }}
        {{- if eq .Values.stardog.backup.provider "azure" }}
        - name: {{ include "stardog.fullname" . }}-az-backups
          mountPath: /var/opt/stardog-backups 
          readOnly: false
        {{- end }}
        {{- if eq .Values.stardog.backup.provider "gcp" }}
        - name: {{ include "stardog.fullname" . }}-gcp-backups
          mountPath: /var/opt/stardog-backups
          readOnly: false
        {{- end }}
        {{- end }} 
        env:
        - name: PORT
          value: "{{ .Values.stardog.ports.server }}"
        - name: STARDOG_HOME
          value: "/var/opt/stardog/"
        - name: STARDOG_LICENSE_PATH
          value: "/etc/stardog-license/stardog-license-key.bin"
        - name: STARDOG_PROPERTIES
          value: "/etc/stardog-conf/stardog.properties"
        - name: STARDOG_SERVER_JAVA_ARGS
          value: "-Djava.io.tmpdir={{ .Values.stardog.tmpDir }} -XX:+HeapDumpOnOutOfMemoryError -Xms{{ .Values.stardog.jvm.minHeap }} -Xmx{{ .Values.stardog.jvm.maxHeap }} -XX:MaxDirectMemorySize={{ .Values.stardog.jvm.directMem }} {{ .Values.stardog.javaArgs }}"
        - name: STARDOG_TMP_PATH
          value: "{{ .Values.stardog.tmpDir }}"
        - name: LICENSE_NAME
          value: {{ .Release.Namespace }}
        command:
        - /bin/bash
        - -c
        - |
          set -ex
          {{ .Files.Get "files/utils.sh" | indent 10 }}
          make_temp ${STARDOG_TMP_PATH}
          {{- if .Values.stardog.ssl.enabled }}
          /opt/stardog/bin/stardog-admin server start --foreground --port ${PORT} --home ${STARDOG_HOME} --require-ssl
          {{- else }}
          /opt/stardog/bin/stardog-admin server start --foreground --port ${PORT} --home ${STARDOG_HOME}
          {{- end }}
        livenessProbe:
          httpGet:
            path: /admin/alive
            port: server
          initialDelaySeconds: {{ .Values.stardog.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.stardog.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.stardog.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: /admin/healthcheck
            port: server
          initialDelaySeconds: {{ .Values.stardog.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.stardog.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.stardog.readinessProbe.timeoutSeconds }}
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                /opt/stardog/bin/stardog-admin server stop -u admin -p $(cat /etc/stardog-password/adminpw)
      {{- if .Values.stardog.enableAuditSidecar }}
      - name: {{ include "stardog.fullname" . }}-auditlog
        imagePullPolicy: Always
        image: {{ .Values.stardog.image.registry }}/{{ .Values.stardog.image.repository }}:{{ .Values.stardog.image.tag }}
        resources:
          requests:
            memory: 1Gi
          limits:
            memory: 2Gi
        command:
          - /bin/bash
          - -c
          - |
            while [ ! -f "/var/opt/stardog/audit.log" ]; do
              sleep 1
            done
            /opt/stardog/bin/stardog-admin log print -n 0 --text --json --tail /var/opt/stardog/audit.log
        volumeMounts:
          - name: data
            mountPath: /var/opt/stardog/
            readOnly: true
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.stardog.terminationGracePeriodSeconds }}
      {{- with .Values.stardog.image.pullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .Values.stardog.image.username .Values.stardog.image.password }}
      imagePullSecrets:
      - name: {{ .Release.Name }}-image-pull-secret
      {{- end }}
      volumes:
      {{- if not .Values.stardog.licenseServer.enabled }}
      - name: stardog-license
        secret:
          secretName: stardog-license
      {{- end }}
      - name: {{ include "stardog.fullname" . }}-properties-vol
        configMap:
          name: {{ include "stardog.fullname" . }}-properties
          items:
          - key: stardog.properties
            path: stardog.properties
      - name: {{ include "stardog.fullname" . }}-log4j-vol
        configMap:
          name: {{ include "stardog.fullname" . }}-log4j
          items:
          - key: log4j2.xml
            path: log4j2.xml
      - name: {{ include "stardog.fullname" . }}-password
        secret:
          secretName: {{ include "stardog.fullname" . }}-password
          items:
            - key: password
              path: adminpw
              mode: 444
      {{- if .Values.stardog.jwt.enabled }}
      - name: {{ include "stardog.fullname" . }}-jwt
        configMap:
          name: {{ include "stardog.fullname" . }}-jwt
          items:
            - key: jwt.yaml
              path: jwt.yaml
      {{- end }}
      {{- if .Values.stardog.backup.enabled }}
      {{- if eq .Values.stardog.backup.provider "azure" }}
      - name: {{ include "stardog.fullname" . }}-az-backups
        persistentVolumeClaim:
          claimName: {{ include "stardog.fullname" . }}-azurefile-bck-pvc
          readOnly: false 
      {{- end }}
      {{- if eq .Values.stardog.backup.provider "gcp" }}
      - name: {{ include "stardog.fullname" . }}-gcp-backups
        persistentVolumeClaim:
          claimName: {{ include "stardog.fullname" . }}-gcpfile-bck-pvc
          readOnly: false 
      {{- end }}
      {{- end }} 
      {{- with .Values.stardog.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8}}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      {{- with .Values.stardog.persistence.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.stardog.persistence.storageClass }}
      storageClassName: {{ .Values.stardog.persistence.storageClass  | quote}}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.stardog.persistence.size }}
{{- end }}
        